# main.py
import asyncio
import aiohttp
import json
import sys
import re
from typing import Dict, List, Optional, Any
from dataclasses import dataclass, asdict
from urllib.parse import urljoin, urlparse
from bs4 import BeautifulSoup
import argparse
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

@dataclass
class MobilePlan:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –º–æ–±–∏–ª—å–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞"""
    name: str
    operator: str
    price: str
    data: str
    calls: str = ""
    sms: str = ""
    validity: str = ""
    additional_info: str = ""
    source_url: str = ""

class NorwayMobileParser:
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –Ω–æ—Ä–≤–µ–∂—Å–∫–∏—Ö –º–æ–±–∏–ª—å–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤"""
    
    def __init__(self):
        self.session: Optional[aiohttp.ClientSession] = None
        self.plans: List[MobilePlan] = []
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∞–π—Ç–æ–≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
        self.operators_config = {
            'telia': {
                'url': 'https://www.telia.no/privat/mobil/abonnement',
                'name': 'Telia',
                'selectors': {
                    'plan_cards': '.product-card, .plan-card, [data-testid*="plan"], .subscription-card',
                    'plan_name': 'h3, .plan-name, .product-title, .subscription-name',
                    'price': '.price, .monthly-price, [data-testid*="price"]',
                    'data': '.data-amount, .gb-amount, [data-testid*="data"]'
                }
            },
            'telenor': {
                'url': 'https://www.telenor.no/privat/mobil/abonnement',
                'name': 'Telenor',
                'selectors': {
                    'plan_cards': '.product-card, .plan-item, .subscription-box, [data-cy*="plan"]',
                    'plan_name': 'h3, .plan-title, .product-name',
                    'price': '.price, .amount, [data-cy*="price"]',
                    'data': '.data-text, .gb-text, [data-cy*="data"]'
                }
            },
            'ice': {
                'url': 'https://www.ice.no/mobil/abonnement',
                'name': 'Ice',
                'selectors': {
                    'plan_cards': '.plan-card, .product-item, .subscription-container',
                    'plan_name': 'h3, .plan-name, .title',
                    'price': '.price, .cost, .monthly-fee',
                    'data': '.data-limit, .gb-limit, .data-info'
                }
            },
            'mycall': {
                'url': 'https://mycall.no/mobile-plans',
                'name': 'MyCall',
                'selectors': {
                    'plan_cards': '.plan-box, .offer-card, .mobile-plan',
                    'plan_name': 'h3, .plan-title',
                    'price': '.price, .monthly-price',
                    'data': '.data-amount, .gb-info'
                }
            }
        }
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞
        self.headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
            'Accept-Language': 'en-US,en;q=0.5,no;q=0.3',
            'Accept-Encoding': 'gzip, deflate, br',
            'DNT': '1',
            'Connection': 'keep-alive',
            'Upgrade-Insecure-Requests': '1',
            'Sec-Fetch-Dest': 'document',
            'Sec-Fetch-Mode': 'navigate',
            'Sec-Fetch-Site': 'none'
        }

    async def __aenter__(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä - –≤—Ö–æ–¥"""
        connector = aiohttp.TCPConnector(limit=10, limit_per_host=5, ttl_dns_cache=300)
        timeout = aiohttp.ClientTimeout(total=30, connect=10)
        self.session = aiohttp.ClientSession(
            headers=self.headers,
            connector=connector,
            timeout=timeout,
            cookie_jar=aiohttp.CookieJar(unsafe=True)
        )
        return self

    async def __aexit__(self, exc_type, exc_val, exc_tb):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä - –≤—ã—Ö–æ–¥"""
        if self.session:
            await self.session.close()

    def _clean_text(self, text: str) -> str:
        """–û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
        if not text:
            return ""
        return re.sub(r'\s+', ' ', text.strip())

    def _extract_price(self, text: str) -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ü–µ–Ω—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        if not text:
            return ""
        
        # –ü–æ–∏—Å–∫ –Ω–æ—Ä–≤–µ–∂—Å–∫–∏—Ö –∫—Ä–æ–Ω (NOK, kr)
        price_patterns = [
            r'(\d+(?:,\d+)?)\s*kr',
            r'(\d+(?:,\d+)?)\s*NOK',
            r'kr\s*(\d+(?:,\d+)?)',
            r'NOK\s*(\d+(?:,\d+)?)',
            r'(\d+(?:,\d+)?)\s*,-'
        ]
        
        for pattern in price_patterns:
            match = re.search(pattern, text, re.IGNORECASE)
            if match:
                return f"{match.group(1)} kr"
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
        return self._clean_text(text)

    def _extract_data_amount(self, text: str) -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –æ–±—ä–µ–º–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        if not text:
            return ""
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        data_patterns = [
            r'(\d+(?:,\d+)?)\s*GB',
            r'(\d+(?:,\d+)?)\s*TB',
            r'(\d+(?:,\d+)?)\s*MB',
            r'ubegrenset|unlimited|fri\s*data',
            r'(\d+)\s*giga'
        ]
        
        text_lower = text.lower()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–µ–∑–ª–∏–º–∏—Ç
        if any(word in text_lower for word in ['ubegrenset', 'unlimited', 'fri data', 'uten grense']):
            return "Unlimited"
        
        for pattern in data_patterns:
            match = re.search(pattern, text, re.IGNORECASE)
            if match:
                if pattern.endswith('giga'):
                    return f"{match.group(1)} GB"
                return match.group(0)
        
        return self._clean_text(text)

    async def _fetch_page(self, url: str, max_retries: int = 3) -> Optional[str]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
        for attempt in range(max_retries):
            try:
                logger.info(f"üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ {url} (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries})")
                
                async with self.session.get(url, allow_redirects=True) as response:
                    if response.status == 200:
                        content = await response.text()
                        logger.info(f"‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ ({len(content)} —Å–∏–º–≤–æ–ª–æ–≤)")
                        return content
                    else:
                        logger.warning(f"‚ö†Ô∏è HTTP {response.status} –¥–ª—è {url}")
                        
            except asyncio.TimeoutError:
                logger.warning(f"‚è±Ô∏è –¢–∞–π–º–∞—É—Ç –¥–ª—è {url}")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {url}: {e}")
                
            if attempt < max_retries - 1:
                await asyncio.sleep(2 ** attempt)  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
        
        return None

    def _parse_operator_page(self, html: str, operator_config: Dict[str, Any], base_url: str) -> List[MobilePlan]:
        """–ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞"""
        plans = []
        
        try:
            soup = BeautifulSoup(html, 'html.parser')
            selectors = operator_config['selectors']
            operator_name = operator_config['name']
            
            # –ü–æ–∏—Å–∫ –∫–∞—Ä—Ç–æ—á–µ–∫ —Ç–∞—Ä–∏—Ñ–æ–≤
            plan_elements = []
            for selector in selectors['plan_cards'].split(', '):
                elements = soup.select(selector.strip())
                plan_elements.extend(elements)
            
            logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(plan_elements)} –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è {operator_name}")
            
            for element in plan_elements:
                try:
                    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–ª–∞–Ω–∞
                    name = ""
                    for name_selector in selectors['plan_name'].split(', '):
                        name_elem = element.select_one(name_selector.strip())
                        if name_elem:
                            name = self._clean_text(name_elem.get_text())
                            break
                    
                    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ü–µ–Ω—ã
                    price = ""
                    for price_selector in selectors['price'].split(', '):
                        price_elem = element.select_one(price_selector.strip())
                        if price_elem:
                            price = self._extract_price(price_elem.get_text())
                            break
                    
                    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
                    data = ""
                    for data_selector in selectors['data'].split(', '):
                        data_elem = element.select_one(data_selector.strip())
                        if data_elem:
                            data = self._extract_data_amount(data_elem.get_text())
                            break
                    
                    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ –µ—Å–ª–∏ –µ—Å—Ç—å –æ—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                    if name or price or data:
                        plan = MobilePlan(
                            name=name or "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
                            operator=operator_name,
                            price=price or "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
                            data=data or "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
                            source_url=base_url
                        )
                        plans.append(plan)
                        logger.info(f"üì± –ù–∞–π–¥–µ–Ω –ø–ª–∞–Ω: {plan.name} - {plan.price}")
                
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —ç–ª–µ–º–µ–Ω—Ç–∞: {e}")
                    continue
        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {operator_name}: {e}")
        
        return plans

    async def parse_operator(self, operator_key: str) -> List[MobilePlan]:
        """–ü–∞—Ä—Å–∏–Ω–≥ —Ç–∞—Ä–∏—Ñ–æ–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞"""
        config = self.operators_config.get(operator_key)
        if not config:
            logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä: {operator_key}")
            return []
        
        logger.info(f"üöÄ –ü–∞—Ä—Å–∏–Ω–≥ —Ç–∞—Ä–∏—Ñ–æ–≤ {config['name']}")
        
        html = await self._fetch_page(config['url'])
        if not html:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É {config['name']}")
            return []
        
        plans = self._parse_operator_page(html, config, config['url'])
        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(plans)} —Ç–∞—Ä–∏—Ñ–æ–≤ –¥–ª—è {config['name']}")
        
        return plans

    async def parse_all_operators(self) -> List[MobilePlan]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ"""
        logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ—Ö –Ω–æ—Ä–≤–µ–∂—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤")
        
        tasks = []
        for operator_key in self.operators_config.keys():
            task = self.parse_operator(operator_key)
            tasks.append(task)
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        results = await asyncio.gather(*tasks, return_exceptions=True)
        
        all_plans = []
        for i, result in enumerate(results):
            operator_key = list(self.operators_config.keys())[i]
            if isinstance(result, Exception):
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ {operator_key}: {result}")
            else:
                all_plans.extend(result)
        
        self.plans = all_plans
        logger.info(f"üéâ –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ {len(all_plans)} —Ç–∞—Ä–∏—Ñ–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤")
        
        return all_plans

    def save_to_json(self, filename: str = 'norway_mobile_plans.json'):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ JSON"""
        try:
            data = {
                'total_plans': len(self.plans),
                'operators': list(set(plan.operator for plan in self.plans)),
                'plans': [asdict(plan) for plan in self.plans],
                'timestamp': str(asyncio.get_event_loop().time())
            }
            
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
            
            logger.info(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {filename}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")

    def print_summary(self):
        """–í—ã–≤–æ–¥ —Å–≤–æ–¥–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        if not self.plans:
            print("‚ùå –¢–∞—Ä–∏—Ñ—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        print(f"\nüìä === –°–í–û–î–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í ===")
        print(f"üéØ –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ —Ç–∞—Ä–∏—Ñ–æ–≤: {len(self.plans)}")
        
        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º
        by_operator = {}
        for plan in self.plans:
            if plan.operator not in by_operator:
                by_operator[plan.operator] = []
            by_operator[plan.operator].append(plan)
        
        for operator, plans in by_operator.items():
            print(f"\nüì± {operator}: {len(plans)} —Ç–∞—Ä–∏—Ñ–æ–≤")
            for plan in plans[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 —Ç–∞—Ä–∏—Ñ–∞
                print(f"   ‚Ä¢ {plan.name} - {plan.price} - {plan.data}")
            if len(plans) > 3:
                print(f"   ... –∏ –µ—â–µ {len(plans) - 3} —Ç–∞—Ä–∏—Ñ–æ–≤")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description='–ü–∞—Ä—Å–µ—Ä –Ω–æ—Ä–≤–µ–∂—Å–∫–∏—Ö –º–æ–±–∏–ª—å–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤')
    parser.add_argument('--operator', choices=['telia', 'telenor', 'ice', 'mycall'], 
                       help='–ü–∞—Ä—Å–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞')
    parser.add_argument('--output', '-o', default='norway_mobile_plans.json',
                       help='–§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤')
    
    args = parser.parse_args()
    
    try:
        async with NorwayMobileParser() as mobile_parser:
            if args.operator:
                # –ü–∞—Ä—Å–∏–Ω–≥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
                plans = await mobile_parser.parse_operator(args.operator)
            else:
                # –ü–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
                plans = await mobile_parser.parse_all_operators()
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            mobile_parser.save_to_json(args.output)
            mobile_parser.print_summary()
            
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –ü–∞—Ä—Å–∏–Ω–≥ –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    asyncio.run(main())